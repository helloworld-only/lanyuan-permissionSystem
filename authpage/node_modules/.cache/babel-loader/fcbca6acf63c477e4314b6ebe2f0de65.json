{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport qs from 'qs';\nexport default {\n  name: \"UserDisplay\",\n  data() {\n    return {\n      tableData: [{\n        \"userId\": 1,\n        \"acct\": \"20221102\",\n        \"passwd\": \"123\",\n        \"userName\": \"admin\"\n      }, {\n        \"userId\": 2,\n        \"acct\": \"20221102\",\n        \"passwd\": \"123\",\n        \"userName\": \"admin\"\n      }],\n      layerOpen: false,\n      rules: {},\n      formData: {},\n      layerTitle: '',\n      acctInputDisabled: true\n    };\n  },\n  created() {\n    this.getAllRolesByUserId();\n  },\n  methods: {\n    // 获取数据库中所有用户\n    getAllRolesByUserId() {\n      const url = 'http://localhost' + this.$route.path;\n      axios.get(url).then(res => {\n        this.tableData = res.data;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    // 弹出更新数据的弹出层\n    handleUpdate(row) {\n      this.formData = row; //不能这样写，不然tableData中的对象和formData对象所指的是同一个，即使后续修改失败也会影响tableData中的数据\n      // for(let key in row){\n      //   this.formData[key] = row[key];\n      // }\n      console.log(this.formData);\n      this.layerOpen = true;\n      this.layerTitle = \"修改用户信息\";\n      this.acctInputDisabled = true;\n    },\n    // 弹出添加数据的弹出层\n    handleAdd() {\n      this.layerOpen = true;\n      this.layerTitle = '添加用户';\n      this.acctInputDisabled = false;\n    },\n    submitForm() {\n      if (this.acctInputDisabled) {\n        this.submitUpdateForm();\n      } else {\n        this.submitAddForm();\n      }\n    },\n    // 提交添加数据的表单\n    submitAddForm() {\n      axios({\n        url: 'http://localhost/home/user/add',\n        method: 'post',\n        data: qs.stringify(this.formData)\n      }).then(res => {\n        if (res.data.code === 200) {\n          // const newUser = res.data.data;\n          // this.tableData.push(newUser);\n          this.getAllUsers();\n          this.$message.success('添加成功');\n        }\n      }).catch(err => {\n        this.$message.error('添加失败');\n      }).finally(() => {\n        this.layerOpen = false;\n        this.formData = {}; // 添加后一定要清空formData，不然添加新用户时，新用户的userId就是当前所添加的用户的userId\n      });\n    },\n\n    // 提交更新数据的表单\n    submitUpdateForm() {\n      axios({\n        url: 'http://localhost/home/user/update',\n        method: 'post',\n        data: qs.stringify(this.formData)\n      }).then(res => {\n        console.log(this.formData.userId);\n        if (res.data.code === 200) {\n          this.tableData = this.tableData.filter(item => {\n            if (this.formData.userId == item.userId) {\n              item.passwd = this.formData.passwd;\n              item.userName = this.formData.userName;\n            }\n            return true;\n          });\n          this.$message.success('更新成功');\n        }\n      }).catch(err => {\n        console.log(err);\n        this.$message.error('更新失败');\n      }).finally(() => {\n        this.layerOpen = false;\n        this.formData = {}; // 更新后一定要清空formData，不然添加新用户时，新用户的userId就是当前所更新的用户的userId\n      });\n    },\n\n    // 取消更新数据\n    cancel() {\n      this.layerOpen = false;\n    },\n    // 向后端发起删除请求\n    handleDelete(row) {\n      const userId = row.userId;\n      this.$confirm('是否确认删除用户编号为\"' + userId + '\"的数据项？', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const url = \"http://localhost/home/user/delete/\" + userId;\n        axios.get(url).then(res => {\n          // 这里不采用访问后端接口来更新数据，而是通过前端删除该条数据（建立在删除请求成功后执行）\n          this.tableData = this.tableData.filter(item => {\n            return item.userId != userId;\n          });\n          this.$message.success('删除成功');\n        }).catch(err => {\n          this.$message.error('删除失败' + err);\n        });\n      }).catch(() => {\n        this.$message.info('取消删除成功');\n      });\n    },\n    toRoleDistribution(row) {\n      const path = this.$route.path;\n      this.$router.push(path + '/roleDistribution');\n    }\n  }\n};","map":{"version":3,"mappings":";AA6EA;AACA;AACA;EACAA;EACAC;IACA;MACAC,YACA;QAAA;QAAA;QAAA;QAAA;MAAA,GACA;QAAA;QAAA;QAAA;QAAA;MAAA,EACA;MAEAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;EACA;EACAC;IAEA;IACAC;MACA;MACAC,eACAC;QACA;MACA,GACAC;QACAC;MACA;IACA;IAEA;IACAC;MACA;MACA;MACA;MACA;MACAD;MACA;MACA;MACA;IACA;IAEA;IACAE;MACA;MACA;MACA;IACA;IAEAC;MACA;QACA;MACA;QACA;MACA;IACA;IAEA;IACAC;MACAP;QACAQ;QACAC;QACAnB;MACA;QACA;UACA;UACA;UACA;UACA;QACA;MACA;QACA;MACA;QACA;QACA;MACA;IACA;;IAEA;IACAoB;MACAV;QACAQ;QACAC;QACAnB;MACA;QACAa;QACA;UACA;YACA;cACAQ;cACAA;YACA;YACA;UACA;UACA;QACA;MACA;QACAR;QACA;MACA;QACA;QACA;MACA;IACA;;IACA;IACAS;MACA;IACA;IAEA;IACAC;MACA;MACA;QACAC;QACAC;QACAC;MACA;QACA;QACAhB,eACAC;UACA;UACA;YACA;UACA;UACA;QACA;UACA;QACA;MACA;QACA;MACA;IACA;IAEAgB;MACA;MACA;IACA;EAEA;AACA","names":["name","data","tableData","layerOpen","rules","formData","layerTitle","acctInputDisabled","created","methods","getAllRolesByUserId","axios","then","catch","console","handleUpdate","handleAdd","submitForm","submitAddForm","url","method","submitUpdateForm","item","cancel","handleDelete","confirmButtonText","cancelButtonText","type","toRoleDistribution"],"sourceRoot":"src/components/user","sources":["RoleDistribution.vue"],"sourcesContent":["<template>\r\n<div class=\"app-container\">\r\n    <el-row :gutter=\"10\" class=\"mb8\">\r\n        <el-col :span=\"1.5\">\r\n            <el-button\r\n            type=\"primary\"\r\n            plain\r\n            icon=\"el-icon-plus\"\r\n            size=\"mini\"\r\n            @click=\"handleAdd\"\r\n            >新增</el-button>\r\n        </el-col>\r\n        <el-col :span=\"1.5\">\r\n            <el-button\r\n            type=\"danger\"\r\n            plain\r\n            icon=\"el-icon-delete\"\r\n            size=\"mini\"\r\n            @click=\"handleDelete\"\r\n            >删除</el-button>\r\n        </el-col>\r\n    </el-row>\r\n    <el-table :data=\"tableData\" :stripe=\"true\" style=\"width:100\">\r\n    <el-table-column type=\"selection\" width=\"50\" align=\"center\" />\r\n    <el-table-column key=\"id\" prop=\"id\" align=\"center\" label=\"编号\"></el-table-column>\r\n    <el-table-column key=\"acct\" prop=\"acct\" align=\"center\" label=\"用户账号\"></el-table-column>\r\n    <el-table-column key=\"userName\" prop=\"userName\" align=\"center\" label=\"用户昵称\"></el-table-column>\r\n    <el-table-column key=\"roleName\" prop=\"roleName\" align=\"center\" label=\"角色名称\"></el-table-column>\r\n    <el-table-column label=\"操作\" align=\"center\" class-name=\"small-padding fixed-width\">\r\n        <template slot-scope=\"scope\" v-if=\"scope.row.userId != 1\">\r\n            <el-button\r\n                size=\"mini\"\r\n                type=\"text\"\r\n                icon=\"el-icon-delete\"\r\n                @click=\"handleDelete(scope.row)\"       \r\n            >删除</el-button>\r\n        </template>\r\n    </el-table-column>\r\n    </el-table> \r\n\r\n    <!-- 弹出层 -->\r\n    <el-dialog :title=\"layerTitle\" :visible.sync=\"layerOpen\" width=\"600px\" append-to-body>\r\n        <el-form ref=\"form\" :model=\"formData\" :rules=\"rules\" label-width=\"80px\">\r\n            <el-row>\r\n                <el-col :span=\"12\">\r\n                    <el-form-item label=\"用户编号\" prop=\"userId\">\r\n                    <el-input v-model=\"formData.userId\" disabled placeholder=\"请输入用户编号\" maxlength=\"11\" />\r\n                    </el-form-item>\r\n                </el-col>\r\n                <el-col :span=\"12\">\r\n                    <el-form-item label=\"用户账号\" prop=\"acct\">\r\n                    <el-input v-model=\"formData.acct\" :disabled=\"acctInputDisabled\" placeholder=\"请输入用户账号\" maxlength=\"8\" />\r\n                    </el-form-item>\r\n                </el-col>\r\n            </el-row>\r\n            <el-row>\r\n                <el-col :span=\"12\">\r\n                    <el-form-item label=\"用户密码\" prop=\"passwd\">\r\n                    <el-input v-model=\"formData.passwd\" placeholder=\"请输入用户密码\" maxlength=\"15\" />\r\n                    </el-form-item>\r\n                </el-col>\r\n                <el-col :span=\"12\">\r\n                    <el-form-item label=\"用户昵称\" prop=\"userName\">\r\n                    <el-input v-model=\"formData.userName\" placeholder=\"请输入用户昵称\" maxlength=\"10\" />\r\n                    </el-form-item>\r\n                </el-col>\r\n            </el-row>\r\n        </el-form>\r\n        <div slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\r\n            <el-button @click=\"cancel\">取 消</el-button>\r\n        </div>\r\n    </el-dialog>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport qs from 'qs'\r\nexport default {\r\n    name: \"UserDisplay\",\r\n    data(){\r\n    return { \r\n        tableData:[\r\n            {\"userId\":1,\"acct\":\"20221102\",\"passwd\":\"123\",\"userName\":\"admin\"},\r\n            {\"userId\":2,\"acct\":\"20221102\",\"passwd\":\"123\",\"userName\":\"admin\"}\r\n        ],\r\n\r\n        layerOpen:false,\r\n        rules:{},\r\n        formData:{},\r\n        layerTitle:'',\r\n        acctInputDisabled:true,\r\n    }\r\n    },\r\n    created(){\r\n        this.getAllRolesByUserId();\r\n    },\r\n    methods:{\r\n\r\n    // 获取数据库中所有用户\r\n    getAllRolesByUserId(){\r\n        const url = 'http://localhost' + this.$route.path;\r\n        axios.get(url)\r\n        .then(res => {\r\n            this.tableData = res.data;\r\n        })\r\n        .catch(error =>{\r\n            console.log(error)\r\n        })\r\n    },\r\n\r\n    // 弹出更新数据的弹出层\r\n    handleUpdate(row){\r\n        this.formData = row; //不能这样写，不然tableData中的对象和formData对象所指的是同一个，即使后续修改失败也会影响tableData中的数据\r\n        // for(let key in row){\r\n        //   this.formData[key] = row[key];\r\n        // }\r\n        console.log(this.formData);\r\n        this.layerOpen = true;\r\n        this.layerTitle=\"修改用户信息\";\r\n        this.acctInputDisabled=true;\r\n    },\r\n\r\n    // 弹出添加数据的弹出层\r\n    handleAdd(){\r\n        this.layerOpen=true;\r\n        this.layerTitle='添加用户';\r\n        this.acctInputDisabled=false;\r\n    },\r\n\r\n    submitForm(){\r\n        if(this.acctInputDisabled){\r\n        this.submitUpdateForm();\r\n        }else{\r\n        this.submitAddForm();\r\n        }\r\n    },\r\n\r\n    // 提交添加数据的表单\r\n    submitAddForm(){\r\n        axios({\r\n        url:'http://localhost/home/user/add',\r\n        method:'post',\r\n        data:qs.stringify(this.formData),\r\n        }).then(res => {\r\n        if(res.data.code === 200){\r\n            // const newUser = res.data.data;\r\n            // this.tableData.push(newUser);\r\n            this.getAllUsers()\r\n            this.$message.success('添加成功');\r\n        }\r\n        }).catch(err=>{\r\n        this.$message.error('添加失败');\r\n        }).finally(()=>{\r\n        this.layerOpen = false;\r\n        this.formData={};// 添加后一定要清空formData，不然添加新用户时，新用户的userId就是当前所添加的用户的userId\r\n        })\r\n    },\r\n\r\n    // 提交更新数据的表单\r\n    submitUpdateForm(){\r\n        axios({\r\n        url:'http://localhost/home/user/update',\r\n        method:'post',\r\n        data:qs.stringify(this.formData),\r\n        }).then(res => {\r\n        console.log(this.formData.userId)\r\n        if(res.data.code === 200){\r\n            this.tableData = this.tableData.filter(item => {\r\n            if (this.formData.userId == item.userId){\r\n                item.passwd = this.formData.passwd;\r\n                item.userName = this.formData.userName;\r\n            }\r\n            return true;\r\n            });\r\n            this.$message.success('更新成功');\r\n        }\r\n        }).catch( err =>{\r\n        console.log(err)\r\n        this.$message.error('更新失败');\r\n        }).finally(()=>{\r\n        this.layerOpen = false;\r\n        this.formData = {}; // 更新后一定要清空formData，不然添加新用户时，新用户的userId就是当前所更新的用户的userId\r\n        })\r\n    },\r\n    // 取消更新数据\r\n    cancel(){\r\n        this.layerOpen = false;\r\n    },\r\n\r\n    // 向后端发起删除请求\r\n    handleDelete(row){\r\n        const userId = row.userId;\r\n        this.$confirm('是否确认删除用户编号为\"' + userId + '\"的数据项？',{\r\n        confirmButtonText:'确定',\r\n        cancelButtonText:'取消',\r\n        type:'warning',\r\n        }).then(()=>{\r\n        const url = \"http://localhost/home/user/delete/\" + userId;\r\n        axios.get(url)\r\n        .then(res =>{\r\n            // 这里不采用访问后端接口来更新数据，而是通过前端删除该条数据（建立在删除请求成功后执行）\r\n            this.tableData = this.tableData.filter((item)=>{\r\n            return item.userId != userId;\r\n            });\r\n            this.$message.success('删除成功');\r\n        }).catch(err=>{\r\n            this.$message.error('删除失败' + err)\r\n        })\r\n        }).catch(()=>{\r\n        this.$message.info('取消删除成功')\r\n        })  \r\n    },\r\n\r\n    toRoleDistribution(row){\r\n        const path = this.$route.path;\r\n        this.$router.push(path+'/roleDistribution');\r\n    },\r\n\r\n    }\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}