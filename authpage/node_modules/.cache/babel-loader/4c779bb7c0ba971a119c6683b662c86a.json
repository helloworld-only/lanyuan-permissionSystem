{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport qs from 'qs';\nexport default {\n  name: \"RoleDisplay\",\n  data() {\n    return {\n      tableData: [{\n        \"authId\": 1,\n        \"authName\": \"20221102\"\n      }, {\n        \"authId\": 2,\n        \"authName\": \"20221104\"\n      }],\n      layerOpen: false,\n      rules: {},\n      formData: {},\n      layerTitle: '',\n      authNameInputDisabled: true\n    };\n  },\n  created() {\n    this.getAllAuths();\n  },\n  methods: {\n    // 获取数据库中所有角色\n    getAllAuths() {\n      const url = 'http://localhost' + this.$route.path;\n      axios.get(url).then(res => {\n        this.tableData = res.data;\n        if (this.tableData.length > 1) {\n          const sortKey = Object.keys(this.tableData[0]);\n          this.tableData = this.tableData.sort((x, y) => {\n            return x[sortKey] - y[sortKey];\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    // 弹出添加数据的弹出层\n    handleAdd() {\n      this.layerOpen = true;\n      this.layerTitle = '添加角色';\n      this.authNameInputDisabled = false;\n    },\n    submitForm() {\n      this.submitAddForm();\n    },\n    // 提交添加数据的表单\n    submitAddForm() {\n      axios({\n        url: 'http://localhost/home/auth/add',\n        method: 'post',\n        data: qs.stringify(this.formData)\n      }).then(res => {\n        if (res.data.code === 200) {\n          const newUser = res.data.data;\n          this.tableData.push(newUser);\n          // this.getAllRoles();\n          this.$message.success('添加成功');\n        }\n      }).catch(err => {\n        this.$message.error('添加失败');\n      }).finally(() => {\n        this.layerOpen = false;\n        this.formData = {}; // 添加后一定要清空formData，不然添加新用户时，新用户的userId就是当前所添加的用户的userId\n      });\n    },\n\n    // 提交更新数据的表单\n    submitUpdateForm() {\n      axios({\n        url: 'http://localhost/home/user/update',\n        method: 'post',\n        data: qs.stringify(this.formData)\n      }).then(res => {\n        console.log(this.formData.authId);\n        if (res.data.code === 200) {\n          this.tableData = this.tableData.filter(item => {\n            if (this.formData.authId == item.authId) {\n              item.authName = this.formData.authName;\n            }\n            return true;\n          });\n          this.$message.success('更新成功');\n        }\n      }).catch(err => {\n        console.log(err);\n        this.$message.error('更新失败');\n      }).finally(() => {\n        this.layerOpen = false;\n        this.formData = {}; // 更新后一定要清空formData，不然添加新用户时，新用户的userId就是当前所更新的用户的userId\n      });\n    },\n\n    // 取消更新数据\n    cancel() {\n      this.layerOpen = false;\n    },\n    // 向后端发起删除请求\n    handleDelete(row) {\n      const authId = row.authId;\n      this.$confirm('是否确认删除权限编号为 \"' + authId + '\" 的数据项？', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const url = \"http://localhost/home/auth/delete/\" + authId;\n        axios.get(url).then(res => {\n          // 这里不采用访问后端接口来更新数据，而是通过前端删除该条数据（建立在删除请求成功后执行）\n          this.tableData = this.tableData.filter(item => {\n            return item.authId != authId;\n          });\n          this.$message.success('删除成功');\n        }).catch(err => {\n          this.$message.error('删除失败' + err);\n        });\n      }).catch(() => {\n        this.$message.info('取消删除成功');\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AAqEA;AACA;AACA;EACAA;EACAC;IACA;MACAC,YACA;QAAA;QAAA;MAAA,GACA;QAAA;QAAA;MAAA,EACA;MAEAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;EACA;EACAC;IAEA;IACAC;MACA;MACAC,eACAC;QACA;QACA;UACA;UACA;YACA;UACA;QACA;MAEA,GACAC;QACAC;MACA;IACA;IAEA;IACAC;MACA;MACA;MACA;IACA;IAEAC;MACA;IACA;IAEA;IACAC;MACAN;QACAO;QACAC;QACAlB;MACA;QACA;UACA;UACA;UACA;UACA;QACA;MACA;QACA;MACA;QACA;QACA;MACA;IACA;;IAEA;IACAmB;MACAT;QACAO;QACAC;QACAlB;MACA;QACAa;QACA;UACA;YACA;cACAO;YACA;YACA;UACA;UACA;QACA;MACA;QACAP;QACA;MACA;QACA;QACA;MACA;IACA;;IACA;IACAQ;MACA;IACA;IAEA;IACAC;MACA;MACA;QACAC;QACAC;QACAC;MACA;QACA;QACAf,eACAC;UACA;UACA;YACA;UACA;UACA;QACA;UACA;QACA;MACA;QACA;MACA;IACA;EAEA;AACA","names":["name","data","tableData","layerOpen","rules","formData","layerTitle","authNameInputDisabled","created","methods","getAllAuths","axios","then","catch","console","handleAdd","submitForm","submitAddForm","url","method","submitUpdateForm","item","cancel","handleDelete","confirmButtonText","cancelButtonText","type"],"sourceRoot":"src/components/auth","sources":["AuthDisplay.vue"],"sourcesContent":["<template>\r\n<div class=\"app-container\">\r\n    <el-row :gutter=\"10\" class=\"mb8\">\r\n        <el-col :span=\"1.5\">\r\n            <el-button\r\n            type=\"primary\"\r\n            plain\r\n            icon=\"el-icon-plus\"\r\n            size=\"mini\"\r\n            @click=\"handleAdd\"\r\n            >新增</el-button>\r\n        </el-col>   \r\n        <el-col :span=\"1.5\">\r\n            <el-button\r\n            type=\"danger\"\r\n            plain\r\n            icon=\"el-icon-delete\"\r\n            size=\"mini\"\r\n            @click=\"handleDelete\"\r\n            >删除</el-button>\r\n        </el-col>\r\n    </el-row>\r\n\r\n    <el-table :data=\"tableData\" :stripe=\"true\" style=\"width:100\">\r\n        <el-table-column type=\"selection\" width=\"50\" align=\"center\" />\r\n        <el-table-column key=\"authId\" prop=\"authId\" align=\"center\" label=\"权限编号\"></el-table-column>\r\n        <el-table-column key=\"authName\" prop=\"authName\" align=\"center\" label=\"权限名称\"></el-table-column>\r\n        <el-table-column label=\"操作\" align=\"center\" class-name=\"small-padding fixed-width\">\r\n            <template slot-scope=\"scope\" v-if=\"scope.row.authId != 1\">\r\n                <!-- \r\n                    v-hasPermi=\"['system:user:edit']\"\r\n                    v-hasPermi=\"['system:user:remove']\" -->\r\n                <el-button\r\n                    size=\"mini\"\r\n                    type=\"text\"\r\n                    icon=\"el-icon-delete\"\r\n                    @click=\"handleDelete(scope.row)\"\r\n                    \r\n                >删除</el-button>\r\n            </template>\r\n        </el-table-column>\r\n    </el-table> \r\n\r\n    <!-- 弹出层 -->\r\n    <el-dialog :title=\"layerTitle\" :visible.sync=\"layerOpen\" width=\"600px\" append-to-body>\r\n        <el-form ref=\"form\" :model=\"formData\" :rules=\"rules\" label-width=\"80px\">\r\n            <el-row>\r\n                <el-col :span=\"12\">\r\n                    <el-form-item label=\"权限编号\" prop=\"authId\">\r\n                    <el-input v-model=\"formData.authId\" disabled placeholder=\"请输入权限编号\" maxlength=\"11\" />\r\n                    </el-form-item>\r\n                </el-col>\r\n                <el-col :span=\"12\">\r\n                    <el-form-item label=\"权限名称\" prop=\"authName\">\r\n                    <el-input v-model=\"formData.authName\"  placeholder=\"请输入权限名称\" maxlength=\"8\" />\r\n                    </el-form-item>\r\n                </el-col>\r\n            </el-row>\r\n            \r\n        </el-form>\r\n        <div slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\r\n            <el-button @click=\"cancel\">取 消</el-button>\r\n        </div>\r\n    </el-dialog>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport qs from 'qs'\r\nexport default {\r\n    name: \"RoleDisplay\",\r\n    data(){\r\n    return { \r\n        tableData:[\r\n            {\"authId\":1,\"authName\":\"20221102\"},\r\n            {\"authId\":2,\"authName\":\"20221104\"}\r\n        ],\r\n\r\n        layerOpen:false,\r\n        rules:{},\r\n        formData:{},\r\n        layerTitle:'',\r\n        authNameInputDisabled:true,\r\n    }\r\n    },\r\n    created(){\r\n        this.getAllAuths();\r\n    },\r\n    methods:{\r\n\r\n        // 获取数据库中所有角色\r\n        getAllAuths(){\r\n            const url = 'http://localhost' + this.$route.path;\r\n            axios.get(url)\r\n            .then(res => {\r\n                this.tableData = res.data;\r\n                if(this.tableData.length > 1){\r\n                    const sortKey = Object.keys(this.tableData[0]);\r\n                    this.tableData = this.tableData.sort((x,y)=>{\r\n                        return x[sortKey] - y[sortKey];\r\n                    })\r\n                }\r\n                \r\n            })\r\n            .catch(error =>{\r\n                console.log(error)\r\n            })\r\n        },\r\n\r\n        // 弹出添加数据的弹出层\r\n        handleAdd(){\r\n            this.layerOpen=true;\r\n            this.layerTitle='添加角色';\r\n            this.authNameInputDisabled=false;\r\n        },\r\n\r\n        submitForm(){\r\n            this.submitAddForm();\r\n        },\r\n\r\n        // 提交添加数据的表单\r\n        submitAddForm(){\r\n            axios({\r\n            url:'http://localhost/home/auth/add',\r\n            method:'post',\r\n            data:qs.stringify(this.formData),\r\n            }).then(res => {\r\n            if(res.data.code === 200){\r\n                const newUser = res.data.data;\r\n                this.tableData.push(newUser);\r\n                // this.getAllRoles();\r\n                this.$message.success('添加成功');\r\n            }\r\n            }).catch(err=>{\r\n                this.$message.error('添加失败');\r\n            }).finally(()=>{\r\n                this.layerOpen = false;\r\n                this.formData={};// 添加后一定要清空formData，不然添加新用户时，新用户的userId就是当前所添加的用户的userId\r\n            })\r\n        },\r\n\r\n        // 提交更新数据的表单\r\n        submitUpdateForm(){\r\n            axios({\r\n            url:'http://localhost/home/user/update',\r\n            method:'post',\r\n            data:qs.stringify(this.formData),\r\n            }).then(res => {\r\n            console.log(this.formData.authId)\r\n            if(res.data.code === 200){\r\n                this.tableData = this.tableData.filter(item => {\r\n                if (this.formData.authId == item.authId){\r\n                    item.authName = this.formData.authName;\r\n                }\r\n                return true;\r\n                });\r\n                this.$message.success('更新成功');\r\n            }\r\n            }).catch( err =>{\r\n            console.log(err)\r\n            this.$message.error('更新失败');\r\n            }).finally(()=>{\r\n            this.layerOpen = false;\r\n            this.formData = {}; // 更新后一定要清空formData，不然添加新用户时，新用户的userId就是当前所更新的用户的userId\r\n            })\r\n        },\r\n        // 取消更新数据\r\n        cancel(){\r\n            this.layerOpen = false;\r\n        },\r\n\r\n        // 向后端发起删除请求\r\n        handleDelete(row){\r\n            const authId = row.authId;\r\n            this.$confirm('是否确认删除权限编号为 \"' + authId + '\" 的数据项？',{\r\n                confirmButtonText:'确定',\r\n                cancelButtonText:'取消',\r\n                type:'warning',\r\n            }).then(()=>{\r\n                const url = \"http://localhost/home/auth/delete/\" + authId;\r\n                axios.get(url)\r\n                .then(res =>{\r\n                    // 这里不采用访问后端接口来更新数据，而是通过前端删除该条数据（建立在删除请求成功后执行）\r\n                    this.tableData = this.tableData.filter((item)=>{\r\n                        return item.authId != authId;\r\n                    });\r\n                    this.$message.success('删除成功');\r\n                }).catch(err=>{\r\n                    this.$message.error('删除失败' + err)\r\n                })\r\n            }).catch(()=>{\r\n                this.$message.info('取消删除成功')\r\n            })  \r\n        },\r\n\r\n    }\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}